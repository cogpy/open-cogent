generator client {
  provider        = "prisma-client-js"
  output          = "../../../node_modules/.prisma/client"
  binaryTargets   = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-3.0.x"]
  previewFeatures = ["metrics", "relationJoins", "nativeDistinct", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

model User {
  id              String    @id @default(uuid()) @db.VarChar
  name            String    @db.VarChar
  email           String    @unique @db.VarChar
  emailVerifiedAt DateTime? @map("email_verified") @db.Timestamptz(3)
  avatarUrl       String?   @map("avatar_url") @db.VarChar
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  /// Not available if user signed up through OAuth providers
  password        String?   @db.VarChar
  /// Indicate whether the user finished the signup progress.
  /// for example, the value will be false if user never registered and invited into a workspace by others.
  registered      Boolean   @default(true)
  disabled        Boolean   @default(false)

  features          UserFeature[]
  connectedAccounts ConnectedAccount[]
  sessions          UserSession[]
  aiSessions        AiSession[]
  appConfigs        AppConfig[]
  createdAiJobs     AiJobs[]           @relation("createdAiJobs")
  settings          UserSettings?
  AiUserFiles       AiUserFiles[]
  AiUserDocs        AiUserDocs[]

  @@index([email])
  @@map("users")
}

model ConnectedAccount {
  id                String    @id @default(uuid()) @db.VarChar
  userId            String    @map("user_id") @db.VarChar
  provider          String    @db.VarChar
  providerAccountId String    @map("provider_account_id") @db.VarChar
  scope             String?   @db.Text
  accessToken       String?   @map("access_token") @db.Text
  refreshToken      String?   @map("refresh_token") @db.Text
  expiresAt         DateTime? @map("expires_at") @db.Timestamptz(3)
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt         DateTime  @updatedAt @map("updated_at") @db.Timestamptz(3)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([providerAccountId])
  @@map("user_connected_accounts")
}

model Session {
  id           String        @id @default(uuid()) @db.VarChar
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(3)
  userSessions UserSession[]

  // @deprecated use [UserSession.expiresAt]
  deprecated_expiresAt DateTime? @map("expires_at") @db.Timestamptz(3)

  @@map("multiple_users_sessions")
}

model UserSession {
  id        String    @id @default(uuid()) @db.VarChar
  sessionId String    @map("session_id") @db.VarChar
  userId    String    @map("user_id") @db.VarChar
  expiresAt DateTime? @map("expires_at") @db.Timestamptz(3)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)

  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sessionId, userId])
  @@map("user_sessions")
}

model VerificationToken {
  token      String   @db.VarChar
  type       Int      @db.SmallInt
  credential String?  @db.Text
  expiresAt  DateTime @db.Timestamptz(3)

  @@unique([type, token])
  @@map("verification_tokens")
}

model Feature {
  id        Int      @id @default(autoincrement())
  name      String   @map("feature") @db.VarChar
  configs   Json     @default("{}") @db.Json
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)

  userFeatures UserFeature[]

  @@unique([name])
  @@map("features")
}

model UserFeature {
  id        Int       @id @default(autoincrement())
  userId    String    @map("user_id") @db.VarChar
  featureId Int       @map("feature_id") @db.Integer
  // it should be typed as `optional` in the codebase, but we would keep all values exists during data migration.
  // so it's safe to assert it a non-null value.
  name      String    @default("") @map("name") @db.VarChar
  // a little redundant, but fast the queries
  type      Int       @default(0) @map("type") @db.Integer
  reason    String    @db.VarChar
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  expiredAt DateTime? @map("expired_at") @db.Timestamptz(3)
  activated Boolean   @default(false)

  feature Feature @relation(fields: [featureId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([name])
  @@index([featureId])
  @@map("user_features")
}

enum AiPromptRole {
  system
  assistant
  user
}

model AiPromptMessage {
  promptId    Int          @map("prompt_id") @db.Integer
  // if a group of prompts contains multiple sentences, idx specifies the order of each sentence
  idx         Int          @db.Integer
  // system/assistant/user
  role        AiPromptRole
  // prompt content
  content     String       @db.Text
  attachments Json?        @db.Json
  params      Json?        @db.Json
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamptz(3)

  prompt AiPrompt @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@unique([promptId, idx])
  @@map("ai_prompts_messages")
}

model AiPrompt {
  id             Int      @id @default(autoincrement()) @db.Integer
  name           String   @unique @db.VarChar(32)
  // an mark identifying which view to use to display the session
  // it is only used in the frontend and does not affect the backend
  action         String?  @db.VarChar
  model          String   @db.VarChar
  optionalModels String[] @default([]) @map("optional_models") @db.VarChar
  config         Json?    @db.Json
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt      DateTime @default(now()) @map("updated_at") @db.Timestamptz(3)
  // whether the prompt is modified by the admin panel
  modified       Boolean  @default(false)

  messages AiPromptMessage[]
  sessions AiSession[]

  @@map("ai_prompts_metadata")
}

model AiSessionMessage {
  id            String       @id @default(uuid()) @db.VarChar
  sessionId     String       @map("session_id") @db.VarChar
  role          AiPromptRole
  content       String       @db.Text
  streamObjects Json?        @db.Json
  attachments   Json?        @db.Json
  params        Json?        @db.Json
  createdAt     DateTime     @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt     DateTime     @updatedAt @map("updated_at") @db.Timestamptz(3)

  session AiSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@map("ai_sessions_messages")
}

model AiSession {
  id           String    @id @default(uuid()) @db.VarChar
  userId       String    @map("user_id") @db.VarChar
  promptName   String    @map("prompt_name") @db.VarChar(32)
  promptAction String?   @default("") @map("prompt_action") @db.VarChar(32)
  pinned       Boolean   @default(false)
  title        String?   @db.VarChar
  messageCost  Int       @default(0)
  tokenCost    Int       @default(0)
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
  deletedAt    DateTime? @map("deleted_at") @db.Timestamptz(3)

  // the document id, if the session is created from a document
  docId    String? @map("doc_id") @db.VarChar
  // client custom metadata
  metadata String  @db.VarChar

  user     User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt   AiPrompt           @relation(fields: [promptName], references: [name], onDelete: Cascade)
  messages AiSessionMessage[]
  context  AiContext[]

  @@index([promptName])
  @@index([userId])
  @@map("ai_sessions_metadata")
}

model AiContext {
  id        String @id @default(uuid()) @db.VarChar
  sessionId String @map("session_id") @db.VarChar
  config    Json   @db.Json

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  embeddings AiContextEmbedding[]
  session    AiSession            @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("ai_contexts")
}

model AiContextEmbedding {
  id        String                      @id @default(uuid()) @db.VarChar
  contextId String                      @map("context_id") @db.VarChar
  fileId    String                      @map("file_id") @db.VarChar
  // a file can be divided into multiple chunks and embedded separately.
  chunk     Int                         @db.Integer
  content   String                      @db.VarChar
  embedding Unsupported("vector(1024)")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  context AiContext @relation(fields: [contextId], references: [id], onDelete: Cascade)

  @@unique([contextId, fileId, chunk])
  @@index([embedding], map: "ai_context_embeddings_idx")
  @@map("ai_context_embeddings")
}

model AiUserDocs {
  docId     String @default(uuid()) @map("doc_id") @db.VarChar
  userId    String @map("user_id") @db.VarChar
  // always create from exists session
  sessionId String @map("session_id") @db.VarChar
  title     String @db.VarChar
  content   String @db.VarChar

  // client custom metadata
  metadata String @db.VarChar

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  embeddings AiUserDocEmbedding[]

  @@id([userId, docId])
  @@map("ai_user_docs")
}

model AiUserDocEmbedding {
  userId    String                      @map("user_id") @db.VarChar
  docId     String                      @map("doc_id") @db.VarChar
  // a document can be divided into multiple chunks and embedded separately.
  chunk     Int                         @db.Integer
  content   String                      @db.VarChar
  embedding Unsupported("vector(1024)")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  doc AiUserDocs @relation(fields: [userId, docId], references: [userId, docId], onDelete: Cascade)

  @@id([userId, docId, chunk])
  @@index([embedding], map: "ai_workspace_doc_embeddings_idx")
  @@map("ai_user_doc_embeddings")
}

model AiUserFiles {
  userId   String @map("user_id") @db.VarChar
  fileId   String @map("file_id") @db.VarChar
  blobId   String @default("") @map("blob_id") @db.VarChar
  fileName String @map("file_name") @db.VarChar
  mimeType String @map("mime_type") @db.VarChar
  size     Int    @db.Integer

  // client custom metadata
  metadata String @db.VarChar

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  embeddings AiUserFileEmbedding[]

  @@id([userId, fileId])
  @@map("ai_user_files")
}

model AiUserFileEmbedding {
  userId    String                      @map("user_id") @db.VarChar
  fileId    String                      @map("file_id") @db.VarChar
  // a file can be divided into multiple chunks and embedded separately.
  chunk     Int                         @db.Integer
  content   String                      @db.VarChar
  embedding Unsupported("vector(1024)")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  file AiUserFiles @relation(fields: [userId, fileId], references: [userId, fileId], onDelete: Cascade)

  @@id([userId, fileId, chunk])
  @@index([embedding], map: "ai_workspace_file_embeddings_idx")
  @@map("ai_user_file_embeddings")
}

enum AiJobStatus {
  pending
  running
  finished
  claimed
  failed
}

enum AiJobType {
  transcription
}

model AiJobs {
  id        String      @id @default(uuid()) @db.VarChar
  blobId    String      @map("blob_id") @db.VarChar
  createdBy String?     @map("created_by") @db.VarChar
  // job type, like "transcription"
  type      AiJobType
  status    AiJobStatus @default(pending)
  // job result
  payload   Json        @db.Json

  startedAt  DateTime  @default(now()) @map("started_at") @db.Timestamptz(3)
  finishedAt DateTime? @map("finished_at") @db.Timestamptz(3)

  // will delete creator record if creator's account is deleted
  createdByUser User? @relation(name: "createdAiJobs", fields: [createdBy], references: [id], onDelete: SetNull)

  @@unique([createdBy, blobId])
  @@map("ai_jobs")
}

model DataMigration {
  id         String    @id @default(uuid()) @db.VarChar
  name       String    @unique @db.VarChar
  startedAt  DateTime  @default(now()) @map("started_at") @db.Timestamptz(3)
  finishedAt DateTime? @map("finished_at") @db.Timestamptz(3)

  @@map("_data_migrations")
}

enum RuntimeConfigType {
  String
  Number
  Boolean
  Object
  Array
}

model AppConfig {
  id            String   @id @db.VarChar
  value         Json     @db.JsonB
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)
  lastUpdatedBy String?  @map("last_updated_by") @db.VarChar

  lastUpdatedByUser User? @relation(fields: [lastUpdatedBy], references: [id], onDelete: SetNull)

  @@map("app_configs")
}

model UserSettings {
  userId    String   @id @map("user_id") @db.VarChar
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)
  payload   Json     @db.JsonB

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

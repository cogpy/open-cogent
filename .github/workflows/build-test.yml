name: Build & Test

on:
  push:
    branches:
      - canary
      - beta
      - stable
      - v[0-9]+.[0-9]+.x-staging
      - v[0-9]+.[0-9]+.x
    paths-ignore:
      - README.md
  pull_request:
  merge_group:

env:
  DEBUG: napi:*
  BUILD_TYPE: canary
  APP_NAME: open-agent
  OPEN_AGENT_ENV: dev
  COVERAGE: true
  MACOSX_DEPLOYMENT_TARGET: '10.13'
  DEPLOYMENT_TYPE: agent

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: --max-old-space-size=14384
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'typescript']
        project: ['open-agent', 'blocksuite']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          source-root: ${{ matrix.project == 'open-agent' && '.' || 'blocksuite' }}

      - name: Delete blocksuite before codeql analysis
        if: ${{ matrix.project == 'open-agent' }}
        run: rm -rf blocksuite

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
  lint:
    name: Lint
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: actions/checkout@v4
      - name: Run oxlint
        # oxlint is fast, so wrong code will fail quickly
        run: yarn dlx $(node -e "console.log(require('./package.json').scripts['lint:ox'].replace('oxlint', 'oxlint@' + require('./package.json').devDependencies.oxlint))")
      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          full-cache: true
      - name: Run ESLint
        run: yarn lint:eslint --max-warnings=0
      - name: Run Prettier
        # Set nmMode in `actions/setup-node` will modify the .yarnrc.yml
        run: |
          git checkout .yarnrc.yml
          yarn lint:prettier
      - name: Yarn Dedupe
        run: yarn dedupe --check

  typecheck:
    name: Typecheck
    runs-on: ubuntu-24.04-arm
    env:
      NODE_OPTIONS: --max-old-space-size=14384
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          full-cache: true
      - name: Run Type Check
        run: yarn typecheck
      - name: Run BS Docs Build
        run: |
          yarn oa bs-docs build
          git status --porcelain | grep . && {
            echo "Run 'yarn typecheck && yarn oa bs-docs build' and make sure all changes are submitted"
            exit 1
          } || {
            echo "All changes are submitted"
          }

  lint-rust:
    name: Lint Rust
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/build-rust
        with:
          no-build: 'true'
      - name: fmt check
        run: |
          rustup toolchain add nightly
          rustup component add --toolchain nightly-x86_64-unknown-linux-gnu rustfmt
          cargo +nightly fmt --all -- --check
      - name: Clippy
        run: |
          rustup component add clippy
          cargo clippy --workspace --exclude open_agent_server_native --all-targets --all-features -- -D warnings
          cargo clippy -p open_agent_server_native --all-targets --all-features -- -D warnings

  check-git-status:
    name: Check Git Status
    runs-on: ubuntu-latest
    needs:
      - build-server-native
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          full-cache: true

      - name: Download server-native.node
        uses: actions/download-artifact@v4
        with:
          name: server-native.node
          path: ./packages/backend/native

      - name: Bundle @afk/reader
        shell: bash
        run: |
          yarn workspace @afk/reader build

      - name: Run Check
        run: |
          yarn oa init
          yarn oa gql build
          yarn oa server genconfig
          git status --porcelain | grep . && {
            echo "Run 'yarn oa init && yarn oa gql build && yarn oa server genconfig' and make sure all changes are submitted"
            exit 1
          } || {
            echo "All changes are submitted"
          }

  check-yarn-binary:
    name: Check yarn binary
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run check
        run: |
          yarn set version $(node -e "console.log(require('./package.json').packageManager.split('@')[1])")
          git diff --exit-code

  build-server-native:
    name: Build Server native
    runs-on: ubuntu-latest
    env:
      CARGO_PROFILE_RELEASE_DEBUG: '1'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          extra-flags: workspaces focus @afk/server-native
      - name: Build Rust
        uses: ./.github/actions/build-rust
        with:
          target: 'x86_64-unknown-linux-gnu'
          package: '@afk/server-native'
      - name: Upload server-native.node
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: server-native.node
          path: ./packages/backend/native/server-native.node
          if-no-files-found: error

  server-test:
    name: Server Test
    runs-on: ubuntu-latest
    needs:
      - build-server-native
    strategy:
      fail-fast: false
      matrix:
        node_index: [0, 1, 2, 3, 4, 5, 6, 7]
        total_nodes: [8]
    env:
      NODE_ENV: test
      DATABASE_URL: postgresql://oa:oa@localhost:5432/oa
      REDIS_SERVER_HOST: localhost
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_PASSWORD: oa
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis
        ports:
          - 6379:6379
      mailer:
        image: mailhog/mailhog
        ports:
          - 1025:1025
          - 8025:8025
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          full-cache: true

      - name: Download server-native.node
        uses: actions/download-artifact@v4
        with:
          name: server-native.node
          path: ./packages/backend/native

      - name: Prepare Server Test Environment
        uses: ./.github/actions/server-test-env

      - name: Run server tests
        run: yarn oa @afk/server test:coverage --forbid-only
        env:
          CARGO_TARGET_DIR: '${{ github.workspace }}/target'
          CI_NODE_INDEX: ${{ matrix.node_index }}
          CI_NODE_TOTAL: ${{ matrix.total_nodes }}

      - name: Upload server test coverage results
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./packages/backend/server/.coverage/lcov.info
          flags: server-test
          name: open-agent
          fail_ci_if_error: false

  server-e2e-test:
    # the new version of server e2e test should be super fast, so sharding testing is not needed
    name: Server E2E Test
    runs-on: ubuntu-latest
    needs:
      - build-server-native
    env:
      NODE_ENV: test
      DATABASE_URL: postgresql://oa:oa@localhost:5432/oa
      REDIS_SERVER_HOST: localhost
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_PASSWORD: oa
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          full-cache: true

      - name: Download server-native.node
        uses: actions/download-artifact@v4
        with:
          name: server-native.node
          path: ./packages/backend/native

      - name: Prepare Server Test Environment
        uses: ./.github/actions/server-test-env

      - name: Run server tests
        run: yarn oa @afk/server e2e:coverage --forbid-only

      - name: Upload server test coverage results
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./packages/backend/server/.coverage/lcov.info
          flags: server-test
          name: open-agent
          fail_ci_if_error: false

  rust-test:
    name: Run native tests
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: ./.github/actions/build-rust
        with:
          package: 'open_agent_common'
          no-build: 'true'

      - name: Install latest nextest release
        uses: taiki-e/install-action@v2
        with:
          tool: nextest@0.9.98

      - name: Run tests
        run: cargo nextest run --workspace --exclude open_agent_server_native --features use-as-lib --release --no-fail-fast

  copilot-api-test:
    name: Server Copilot Api Test
    runs-on: ubuntu-latest
    needs:
      - build-server-native
    env:
      NODE_ENV: test
      DISTRIBUTION: web
      DATABASE_URL: postgresql://oa:oa@localhost:5432/oa
      REDIS_SERVER_HOST: localhost
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_PASSWORD: oa
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis
        ports:
          - 6379:6379
      mailer:
        image: mailhog/mailhog
        ports:
          - 1025:1025
          - 8025:8025
    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: apifilter
        with:
          filters: |
            changed:
              - 'packages/backend/server/src/plugins/copilot/**'
              - 'packages/backend/server/tests/copilot.*'

      - name: Setup Node.js
        if: ${{ steps.apifilter.outputs.changed == 'true' }}
        uses: ./.github/actions/setup-node
        with:
          full-cache: true

      - name: Download server-native.node
        if: ${{ steps.apifilter.outputs.changed == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: server-native.node
          path: ./packages/backend/native

      - name: Prepare Server Test Environment
        if: ${{ steps.apifilter.outputs.changed == 'true' }}
        env:
          SERVER_CONFIG: ${{ secrets.TEST_SERVER_CONFIG }}
        uses: ./.github/actions/server-test-env

      - name: Run server tests
        if: ${{ steps.apifilter.outputs.changed == 'true' }}
        run: yarn oa @afk/server test:copilot:coverage --forbid-only
        env:
          CARGO_TARGET_DIR: '${{ github.workspace }}/target'

      - name: Upload server test coverage results
        if: ${{ steps.apifilter.outputs.changed == 'true' }}
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./packages/backend/server/.coverage/lcov.info
          flags: server-test
          name: open-agent
          fail_ci_if_error: false

  test-done:
    needs:
      - analyze
      - lint
      - typecheck
      - lint-rust
      - check-git-status
      - check-yarn-binary
      - build-server-native
      - server-test
      - server-e2e-test
      - rust-test
      - copilot-api-test
    if: always()
    runs-on: ubuntu-latest
    name: 3, 2, 1 Launch
    steps:
      - run: exit 1
        # Thank you, next https://github.com/vercel/next.js/blob/canary/.github/workflows/build_and_test.yml#L379
        if: ${{ always() && (contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')) }}
